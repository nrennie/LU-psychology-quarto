---
title: "Introduction to Quarto for Research"
subtitle: "<small>9 May 2024</small>"
author: "Dr Nicola Rennie"
bibliography: references.bib
suppress-bibliography: true
format:
  LUstyle-revealjs:
    self-contained: true
    auto-stretch: false
    footer: "{{< fa envelope >}} [n.rennie@lancaster.ac.uk](mailto:n.rennie@lancaster.ac.uk) {{< fa globe >}} [nrennie.rbind.io](https://nrennie.rbind.io/) {{< fa brands linkedin >}} [nicola-rennie](https://www.linkedin.com/in/nicola-rennie/)<br>[nrennie.rbind.io/LU-psychology-quarto](https://nrennie.rbind.io/LU-psychology-quarto/)"
execute: 
  eval: true
  echo: fenced
---

# Welcome!

## About me

::: columns
::: {.column .right}

Lecturer in Health Data Science in the [Centre for Health Informatics, Computing, and Statistics](https://chicas.lancaster-university.uk/).

<br>

Academic background in statistics and operational research. Industry experience in statistics and data science consultancy.

<br>

Organiser of R-Ladies Lancaster, and part of R-Ladies Global team.

:::

::: {.column}

![](images/CHICASlogo.png){fig-align="center" fig-alt="CHICASlogo" width=80%}

:::
:::


## What to expect during this workshop

The workshop will run for *2.5 hours* this morning and *2.5 hours* this afternoon.

* Combines slides, live coding examples, quiz questions, and exercises for you to participate in.

* Ask questions throughout!

## Workshop resources

* GitHub: [github.com/nrennie/LU-psychology-quarto](https://github.com/nrennie/LU-psychology-quarto)

* Slides: [nrennie.rbind.io/LU-psychology-quarto](https://nrennie.rbind.io/LU-psychology-quarto)

# Introduction to Quarto {background-color="#D9DBDB"}

## What do you currently use?

**How do you write your journal articles?**

* Microsoft Word?

* LaTeX?

* R Markdown?

::: {.fragment}

**How do you currently perform analysis?**

* Excel?

* SPSS?

* R?

* Python?

:::


## What is Quarto?

Quarto is an open-source scientific and technical publishing system [that allows you to combine text, images, code, plots, and tables in a fully-reproducible document.]{.fragment}

<br>

[Quarto has support for multiple languages including R, Python, Julia, and Observable.]{.fragment}

<br>

[It also works for a range of output formats such as PDFs, HTML documents, websites, presentations,...]{.fragment}

## Why use Quarto? Why use R?

* More journals require code to be submitted (for transparency and reproducibility). Keeping the code with the paper makes this easier.

* Copying and pasting is tedious (and a great source of accidental errors).

* If you fix an error in code or data, the results and figures in the paper update automatically.

* Easy to share publicly. 

* Open source so anyone can use it.

## What about R Markdown?

R Markdown isn't going anywhere but...

* Quarto has better multi-language support

* More user-friendly

* Better control of the output layouts

# Your first Quarto document {background-color="#D9DBDB"}

## Creating a document

<p style="text-align:center;">
<img src="images/new_doc.gif" alt="Gif of creating a new quarto document" width="50%">
</p>

## Quarto in RStudio

::: columns

::: {.column}

**Source editor**

![](images/source.png){fig-align="center" width="70%"}

:::

::: {.column}

**Visual editor**

![](images/visual.png){fig-align="center" width="70%"}

:::

:::

## Rendering a document

Within RStudio IDE: click **Render** (or Ctrl+Shift+K)

. . . 

<br>

Using {quarto}

```{r}
#| eval: false
#| echo: true
library(quarto)
quarto_render("document.qmd")
```

. . .

<br>

Using the command line

``` bash
quarto render document.qmd
```

## What makes a Quarto document?

YAML header

``` yaml
---
title: "A very cool title"
format: html
---
```

. . . 

Content

* Text, links, images

* Code, tables, plots

* Equations, references


## Output types

::: {.incremental}

* Documents: HTML, PDF, MS Word, Markdown

* Presentations: Revealjs, PowerPoint, Beamer

* Websites

* Books

* ...

:::

## Live demo!

<br><br>

::: {.fragment}

See `examples/Example 1` for full code.

:::

## Exercise 1

Open `exercises/Exercise 1/README.md` for prompts.

* Create a new Quarto HTML document.
* Fill in the YAML options with a title and author.
* Render your document.
* Change the format to `docx`.
* Re-render your document.
* What about PDF?

```{r}
#| label: ex-1-timer
#| echo: false
countdown::countdown(
  minutes = 10,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "1.2em",
  font_size = "2em"
)
```

::: {.fragment} 

See `exercise_solutions/Exercise 1` for full solutions.

:::

# Document content {background-color="#D9DBDB"}

## Document content

In Quarto, you can include many things that aren't code:

::: columns

::: {.column}

* Text
* Sections
* Lists
* Images
* Tables

:::

::: {.column}

* Videos
* Equations
* Citations
* Raw HTML/LaTeX code
* ...

:::

:::

These are primarily written using Markdown syntax. 

## Markdown syntax

* You don't need special software to read it.

* Separates out the content and structure from the document styling.

* Focus on the content not the way it looks.

## Sections

Sections are added to a document using different numbers of `#`:

* `#` creates a Level 1 heading (section)

* `##` creates a Level 2 heading (subsection)

* `###` creates a Level 3 heading (sub-subsection)

* ...

## Lists 

Lists can be created using either `*` or `-`:

```md
* Item 1
* Item 2
* Item 3
```
or

```md
- Item 1
- Item 2
- Item 3
```
gives:

* Item 1
* Item 2
* Item 3

## Numbered lists

Works but isn't great:

```md
1. Item 1
2. Item 2
3. Item 3
```
<br>

::: {.fragment}

Much nicer:

```md
1. Item 1
1. Item 2
1. Item 3
```

gives:

1. Item 1
1. Item 2
1. Item 3

:::

## Links

Add a link using square brackets and round brackets:

* the text to appear in square brackets
* followed by the URL in round brackets

A link to the `[Quarto documentation](https://quarto.org/)`.

<br>

::: {.fragment}

which gives:

A link to the [Quarto documentation](https://quarto.org/).

:::

## Links

If the text to appear and the URL should be the same, you can put it inside `<>` instead:

... can be found at `<https://quarto.org>`.

<br>

::: {.fragment}

which gives:

... can be found at <https://quarto.org>.

:::

## Including image files

Add an image using `![](path/image.png)`.

::: {.fragment}

::: {.callout-tip}

* Use relative file paths rather than absolute file paths - other people won't share the same absolute file path as you!

* File paths are relative to where the Quarto document is!

* Use the **tab** key to show files.

:::

:::

## Image options

Add a figure caption in the square brackets:

`![Figure caption goes here](path/image.png)`.

<br>

::: {.fragment}

Image options can be added in curly brackets afterwards:

`![Figure caption goes here](path/image.png){fig-align="center" width="50%"}`.


:::

## Tables

You can create simple tables with Markdown syntax:

::: columns

::: {.column}

```md
| Surname | Forename |
|---------|----------|
| Rennie  | Nicola   |
| Smith   | Jane     |
| Barclay | Rebekah  |

```

:::

::: {.column}

| Surname | Forename |
|---------|----------|
| Rennie  | Nicola   |
| Smith   | Jane     |
| Barclay | Rebekah  |

:::

:::

<br>

::: {.fragment}

I almost never make tables by writing out `-` and `|`...

:::

## Tables

::: {.incremental}

* You can create nice-looking tables from data files e.g. .csv, .xlsx. We'll look at this in the next section.

* The Visual Editor is much easier for writing tables.

:::

## Tables

**Table** --> **Insert Tables**:

![](images/tables1.png){fig-align="center" width="40%"}

## Tables

![](images/tables2.png){fig-align="center" width="80%"}

## Writing equations with LaTeX

````yaml
---
title: "A very cool title"
format: html
---

\begin{equation}
Y = \beta_0 + \beta_1 \text{age} + \beta_2 \text{education}
\end{equation}

````
::: {.fragment}

\begin{equation}
Y = \beta_0 + \beta_1 \text{age} + \beta_2 \text{education}
\end{equation}

:::

## Live demo!

<br><br>

::: {.fragment}

See `examples/Example 2` for full code.

:::

## Exercise 2

Open `exercises/Exercise 2/README.md` for prompts.

* Create level 1 and level 2 section headings in your document.
* Add some text into your document. If you don't want to write your own, there is some sample text in `sample-text.qmd`.
* Format the text to include a list, and bold or italic text.
* Add a link to the International Personality Item Pool: [https://ipip.ori.org/](https://ipip.ori.org/).
* Include an image in your document. Find your own or use `eggs.jpg`.
* Add a caption to the image and center align it.
* Render your document - check the image appears and the link works.

```{r}
#| label: ex-2-timer
#| echo: false
countdown::countdown(
  minutes = 10,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "1.2em",
  font_size = "2em"
)
```

::: {.fragment} 

See `exercise_solutions/Exercise 2` for full solutions.

:::

# Code blocks {background-color="#D9DBDB"}

## Code blocks

* Code blocks are the main way of including executable R code in a document. 

* Code blocks always start with three backticks, followed by the an ` r` in curly brackets.

```{r}
2 + 2
```

::: {.fragment}

::: {.callout-tip}

Add a new code block using the **Ctrl + Shift + I** keyboard shortcut.

:::

:::

## Some Quarto code tips

::: {.incremental}

- Remember paths are relative - this includes data files!
- You can run code blocks interactively, one at a time. These execute in your Global environment.
- When you render a document, it runs in it's own environment. Objects in the Global environment cannot be accessed.

:::

## Code block options

Code block options can control:

::: {.incremental}

* whether your code is executed
* whether your code is displayed
* if warnings and errors are displayed
* how figures are presented
* how tables are presented

:::

## Code block options

```{r}
#| echo: fenced
#| eval: false
#| warning: false
2 + 2
```

. . . 

<br>

Comparing to R Markdown: 

````
```{{r, warning=FALSE, eval=FALSE}}
2 + 2
```

````

. . . 

<br>

```{r}
#| echo: true
#| eval: false
knitr::convert_chunk_header("document.qmd", output = identity)
```

## Code block options

Code visibility options:

* Hide the code
```yaml
#| echo: false
```
* Show the code
```yaml
#| echo: true
```
* Show the code and the YAML
```yaml
#| echo: fenced
```

## Code block options

````

```{{r}}
#| echo: fenced
#| eval: true
#| warning: false
#| error: false
#| output: asis
#| include: true
```

````

## Predictive code block options (and YAML)

<p style="text-align:center;">
<img src="images/yaml.gif" alt="Gif of predictive yaml in a quarto document" width="50%">
</p>

## Global code block options

::: {.fragment}

::: columns
::: {.column}

**Quarto**

``` yaml
---
title: "A very cool title"
format: docx
execute:
  echo: false
---
```

:::
::: {.column .fragment}

**R Markdown**

````
```{{r}}
knitr::opts_chunk$set(echo = FALSE)
```
````

:::
:::

:::

## Code block options: `label`

::: {.incremental}

* You can add a `label` to each code block.
* They are searchable and help to find where errors exist (compared to `unnumbered code block 39`).
* You can't have duplicate labels.
* Labels are also useful for other things (as we'll see this afternoon).

:::

## Code block options: `label`

Let's say we want to load some data. We can add a `load-data` label:

```{r}
#| label: load-data
library(psych)
data(bfi)
```

<br>

::: {.fragment}

::: {.callout-tip}

Separate label words using a `-` rather than a `_`.

:::

:::

## Data

We'll be using the `bfi` data from {psych} for some examples. You can also load the data directly from a CSV file:

```{r}
#| label: load-data-csv
bfi <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/psych/bfi.csv")
```

See `?psych::bfi`.

## Code block options: `fig-`

Figure options:

```{r}
#| label: age-hist
#| fig-align: center
#| fig-width: 6
#| fig-asp: 0.9
#| fig-cap: "A histogram of participant age"
#| output-location: slide
hist(bfi$age, xlab = "Age", main = "")
```

## Code block options: `tbl-`

There are lots of options for creating tables in R:

* {knitr} - basic
* {kableExtra} - adds to `kable()` in {knitr}
* {gt} - more complex "great tables"
* {gtsummary} - creates summary tables using {gt}
* {flextable} - good for Word documents
* {tinytable} - very lightweight

## Code block options: `tbl-`

Prepare the data:

```{r}
data("sat.act")
sat_summary <- aggregate(
  cbind(SATV, SATQ) ~ education,
  FUN = mean,
  data = sat.act
)
```

## Code block options: `tbl-`

Make a table:

```{r}
#| tbl-cap: "Mean scores by education level"
#| output-location: slide
library(tinytable)
tt(sat_summary)
```

## Live demo!

<br><br>

::: {.fragment}

See `examples/Example 3` for full code.

:::

## Exercise 3

Open `exercises/Exercise 3/README.md` for prompts.

* Add a code block that loads the {psych} package and a dataset from the package e.g. `bfi`. 
  * Alternatively, use some other data that you have/like.
* Add another code block that makes a plot e.g. a bar chart of participants' education categories, `education`. You can use either base R or {ggplot2} (or another package!).
* Change the code block options and see what happens!
* Add a third code block that creates a table showing the first 10 rows and first 5 columns of your data. Hint: `head(bfi[, 1:5], 10)`. Use any table package you prefer.

```{r}
#| label: ex-3-timer
#| echo: false
countdown::countdown(
  minutes = 10,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "1.2em",
  font_size = "2em"
)
```

::: {.fragment} 

See `exercise_solutions/Exercise 3` for full solutions.

:::

# Referencing in Quarto {background-color="#D9DBDB"}

## Referencing results in text

We can also include code inline, rather than as a separate chunk.

This is especially useful for using results values in a paragraph of text.

::: {.fragment}

::: {.callout-note appearance="minimal"}

The total number of participants is `` `r "\u0060r nrow(bfi)\u0060"` ``.

:::

The total number of participants is `r nrow(bfi)`.

:::

## Referencing results in text

For more complex numbers, you can calculate or extract results from a code block.

```{r}
#| echo: fenced
# Calculate median age of females
# Males = 1, Females = 2
age_f <- median(bfi[bfi$gender == 2, "age"])
```

<br>

::: {.fragment}

::: {.callout-note appearance="minimal"}

The median age of females in the study is `` `r "\u0060r age_f\u0060"` ``.

:::

The median age of females in the study is `r age_f`.

:::

## Figure references

Earlier we saw how to add images to Quarto documents, where image options can be added in curly brackets afterwards:

`![Figure caption goes here](path/image.png){fig-align="center" width="50%"}`.

<br>

::: {.fragment}

Add a figure label with a `#`:

`![Figure caption goes here](path/image.png){#fig-my-image fig-align="center" width="50%"}`.

This label must start with `fig-` to be a *Figure* label.

:::

## Figure references

To reference the figure in the text, use an `@` with the figure label:

`@fig-my-image`.

<br>

::: {.fragment}

::: {.callout-tip}

This is basically the pattern of cross-referencing throughout Quarto:

* `#` give a reference label to an object.

* `@` refer the object's reference in the text.

:::

:::

## Cross-referencing

We can add a cross-reference to a different section of our manuscript by adding a reference label that has a `sec-` prefix:

`## Exploratory data analysis {#sec-eda}`

<br>

::: {.fragment}

Then we can make a reference to this section using:

... as discussed in `@sec-eda`.

This automatically adds the word `Section` before the relevant number.

:::

## Cross references

To make sure that the cross reference numbers make sense, you should also switch on the numbering for the document sections:

```yaml
---
title: "My Document"
number-sections: true
---
```

## Plot references

Earlier we made a histogram of age:

```{r}
#| label: age-histogram
#| fig-align: center
#| fig-cap: "A histogram of participant age"
#| output-location: column
hist(bfi$age, xlab = "Age", main = "")
```

## Plot references

To make this a *Figure* reference, we need to prefix the label with `fig-`:

```{r}
#| label: fig-age-histogram
#| fig-align: center
#| fig-cap: "A histogram of participant age"
#| output-location: column
hist(bfi$age, xlab = "Age", main = "")
```

## Plot references

Then:

A histogram of participant ages is shown in `@fig-age-histogram`.

<br>

::: {.fragment}

gives:

A histogram of participant ages is shown in @fig-age-histogram.

:::

## Table references

Table references are similar, except we prefix with `tbl-`:

```{r}
#| label: tbl-sat-summ
#| tbl-cap: "Mean scores by education level"
#| output-location: column
tt(sat_summary)
```

## Table references

Then:

Summary statistics are shown in `@tbl-sat-summ`.

<br>

::: {.fragment}

gives:

Summary statistics are shown in @tbl-sat-summ.

:::

## Citations

To add citations in Quarto, we need two things:

* A source bibliography with citation IDs

* A way to refer citations IDs in Markdown syntax

## Bibliography files

* Quarto supports bibliographies in a wide variety of formats including BibTeX and CSL 

* `.bib` files are probably most common.

* The first entry inside the curly brackets is the citation ID.

```bib
@Manual{psych,
  title = {psych: Procedures for Psychological, Psychometric, and Personality Research},
  author = {{William Revelle}},
  organization = {Northwestern University},
  address = {Evanston, Illinois},
  year = {2024},
  note = {R package version 2.4.1},
  url = {https://CRAN.R-project.org/package=psych},
}
```

::: {.fragment}

::: {.callout-tip}

Find a citation for the R packages you using by running `citation("pkgname")` e.g. `citation("psych")`

:::

:::

## Bibliography files

* Add a bibliography to your document using `bibliography` in the document YAML.

* You might also choose to link the citations to the reference list.

<br>

```yaml
---
title: "Some long interesting title"
bibliography: references.bib
link-citations: true
---
```

## Citations

To refer to a citation, use `@` and the citation ID:

... as described in `@psych.`

which gives:

... as described in @psych.

<br>

::: {.fragment}

Or inside brackets:

...as seen in the bfi data `[@psych].`

which gives:

...as seen in the bfi data [@psych].

:::

## Visual editor

Adding citations is one task where the Visual Editor in RStudio can be really helpful. It provides:

* Integration with Zotero (no set up if using desktop versions).

* Search with DOI, CrossRef, PubMed.

* It updates the `.bib` file for you!

## Visual editor

Click **Insert** --> **Citation**:

![](images/citations.png){fig-align="center" width="60%"}

## Live demo!

<br><br>

::: {.fragment}

See `examples/Example 4` for full code.

:::

## Exercise 4

Open `exercises/Exercise 4/README.md` for prompts.

* Update (or add!) a label to the figure code block you created earlier.
* Add a reference to this in the text.
* Add section references, and cross reference to this section somewhere else in the document.
* Add a citation by either:
  * creating a .bib file and listing it in the YAML.
  * using the Zotero integration

```{r}
#| label: ex-4-timer
#| echo: false
countdown::countdown(
  minutes = 10,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "1.2em",
  font_size = "2em"
)
```

::: {.fragment} 

See `exercise_solutions/Exercise 4` for full solutions.

:::

# Formatting Quarto documents {background-color="#D9DBDB"}

## Formatting documents

Let's assume that we've written a wonderful, fully-reproducible manuscript and we're ready to submit it to our favourite journal. 

::: {.fragment}

Now comes the journal formatting...

:::

## Output formats

Most (but not all)journals aren't quite ready for Quarto (`.qmd`) files. They accept Word documents, LaTeX files, and sometimes PDFs to start with.

::: {.fragment}

**Word documents**

```yaml
---
format: docx
---
```

:::

::: {.fragment}

**LaTeX**

```yaml
---
format:
  pdf:
    keep-tex: true
---
```

:::

## Formatting documents

How can you alter the styling of a Quarto document?

::: {.fragment}

::: columns

::: {.column}

**Word documents**

```yaml
---
format:
  docx:
    reference-doc: apa-style.docx
---
```

:::

::: {.column}

![](images/word-modify-styles.png){fig-align="center"}

:::

:::

:::

## Formatting documents

**LaTeX**

```yaml
---
format:
  pdf:
    keep-tex: true
    template: apatemplate.tex
---
```

::: {.fragment}

The `template.tex` file might be provided by a journal. 

But there's an easier way...

:::

## Quarto extensions

Quarto extensions are a powerful way to modify and extend the behavior of Quarto. Extensions can be used to add styling to your documents.

<br>

::: {.fragment}

Extensions aren't just used to change document styling. There are also extensions to:

* Embed shinylive applications in a Quarto document
* Embed HTML forms in documents
* Use Font Awesome icons in HTML and PDF outputs
* ...

:::

## Journal template extensions

* Quarto extensions can be used to install templates for journal articles.

* Many templates already exist (and the list is getting longer...)

* See: [quarto.org/docs/extensions/listing-journals.html](https://quarto.org/docs/extensions/listing-journals.html)


## Journal template extensions

::: columns

::: {.column}

Submitting to the JSS:

``` yaml
---
title: "A very cool title"
format:
  pdf: default
  jss-pdf:
    keep-tex: true 
---
```

:::

::: {.column .fragment}

Submitting to an Elsevier journal:

``` yaml
---
title: "A very cool title"
format:
  pdf: default
  elsevier-pdf:
    keep-tex: true 
---
```

:::

:::

## Installing Quarto extensions

* Quarto extensions can be shared in different ways.
* The most common way is via GitHub. This is where you'll find the journal templates we looked at.
* Two options for installing from GitHub:
  * From the command line
  * Using the {quarto} R package
* Both ways download all the style files you need and put them in the right place.

## Installing Quarto extensions

**From the command line**

To create a new document from a template:

```md
quarto use template username/repository
```

<br>

To convert an existing document

```md
quarto add username/repository
```

## Installing Quarto extensions

**Using the {quarto} R package**

> Version 1.4 onwards

To create a new document from a template:

```r
quarto::quarto_use_template("username/repository")
```

<br>

To convert an existing document

```md
quarto::quarto_add_extension("username/repository")
```

## APA style manuscripts

APA Quarto extension: [wjschne.github.io/apaquarto](https://wjschne.github.io/apaquarto/)

Install: `quarto::quarto_use_template("wjschne/apaquarto")`

![](images/apa.png){fig-align="center" width="60%"}

## Live demo!

<br><br>

::: {.fragment}

See `examples/Example 5` for full code.

:::

## Exercise 5

Open `exercises/Exercise 5/README.md` for prompts.

* Install the APA Quarto extension.
* Change the output format of your document to APA (docx, html, or pdf). 
* Re-render your document. Do you get an error?
* Look at the installation instructions at [wjschne.github.io/apaquarto/installation.html](https://wjschne.github.io/apaquarto/installation.html) to see what other YAML options are added.
* Add the required information about the author (you).
* Re-render your document.

```{r}
#| label: ex-5-timer
#| echo: false
countdown::countdown(
  minutes = 10,
  color_border = "#b20e10",
  color_text = "#b20e10",
  color_running_text = "white",
  color_running_background = "#b20e10",
  color_finished_text = "#b20e10",
  color_finished_background = "white",
  top = 0,
  margin = "1.2em",
  font_size = "2em"
)
```

::: {.fragment} 

See `exercise_solutions/Exercise 5` for full solutions.

:::

# Collaborating {background-color="#D9DBDB"}

## Collaborating on Quarto documents

We often work with other people when we write papers. 

How do we do that effectively using Quarto?

::: {.fragment}

::: {.callout-caution}

I don't have perfect answers to this...

:::

:::

## Structuring Quarto documents

* Your .qmd files will get excessively long when you start writing (especially when you include code).

* This quickly gets annoying (especially with multiple people adding to a single document).

* There are several options for breaking them down:

  * multiple files
  * multiple files in a project

## Multiple Quarto files 

You can use `{{< include doc.qmd >}}` to include one Quarto document in another.

::: {.fragment}

```md
---
title: "My manuscript"
---

## Introduction

{{< include intro.qmd >}}

## Exploratory data analysis

{{< include analysis.qmd >}}
```
:::

## Quarto projects: Manuscript

::: {.incremental}

* Quarto projects are a collection of Quarto files structured in a specific way that provide:
  * A way to render all or some of the files in a directory.
  * A way to share YAML configuration across multiple documents.
  * The ability to freeze rendered output.

* `Manuscripts` are a special type of Quarto project.

* Has configuration file `_quarto.yml` that identifies the project as a Quarto manuscript and controls how your manuscript is put together.

:::

## Multiple authors: GitHub

::: columns

::: {.column}

* A place to store and manage versions of code.

* Public or private repositories

* Alternatives like GitLab and Bitbucket exist.

:::

::: {.column}

![](images/gh.png){fig-align="center" width="70%"}

:::

:::

## Multiple authors: GitHub

Why use GitHub?

* Easily roll back to previous versions.

* History of who added what.

* Add comments and suggestions via pull requests. Ask for a review. 

* Can render your documents for you.

## Multiple authors: {trackdown}

![](images/trackdown.png){fig-align="center" width="80%"}

See [claudiozandonella.github.io/trackdown](https://claudiozandonella.github.io/trackdown/).

## Multiple authors: it's a known problem

![](images/gh-issue.png){fig-align="center" width="60%"}

GitHub discussion: [github.com/quarto-dev/quarto-cli/discussions/405](https://github.com/quarto-dev/quarto-cli/discussions/405)

## Tricky things: managing versions

When collaborating with other people, it's useful (sometimes crucial) that you all have:

* the same R package versions ({renv} can help with this)
* the same Quarto versions (harder to manage)
* the same LaTeX versions (harder to manage)

## Tricky things: long computations

**Problem:** you have R code that takes a long time to run, and you don't want to re-run it every time you re-render the document.

::: {.fragment}

**Solutions**:

* `cache: true`: store the results of cell executions so they aren’t re-executed with every document render.

* `freeze: true`: in project, state that computational documents should never be re-rendered during a global project render, or alternatively only be re-rendered when their source file changes.

:::

## Tricky things: long computations

**Problem:** you have R code that takes a long time to run, and you don't want to re-run it every time you re-render the document.

**Solutions**:

* {targets}: a Make-like pipeline tool for statistics and data science in R
  * skips costly runtime for tasks that are already up to date
  * run computations upstream before the .qmd document
  * the .qmd is the final "target"

# Discussion {background-color="#D9DBDB"}

## Nice features: shortcodes

::: {.incremental}

* We've already seen the `include` shortcode. 

* There are other shortcodes to make your life easier. 

* Adding {{{< pagebreak >}}} adds a page break in your document (as the name suggests).

* This works across multiple output formats.

:::

## Nice features: diagrams

````
```{dot}
graph G {
  qmd -- Knitr;
  qmd -- Jupyter;
  Knitr -- md;
  Jupyter -- md;
  md -- pandoc;
  pandoc -- HTML;
  pandoc -- PDF;
  pandoc -- Word;
  pandoc -- more;
}
```
````
## Nice features: diagrams

```{dot}
//| fig-align: center
//| fig-height: 5
//| echo: false
graph G {
  bgcolor="#ffffff"
  qmd -- Knitr;
  qmd -- Jupyter;
  Knitr -- md;
  Jupyter -- md;
  md -- pandoc;
  pandoc -- HTML;
  pandoc -- PDF;
  pandoc -- Word;
  pandoc -- more;
}
```

## Examples

* [www.mm218.dev/papers/shrubland_pub_2022.pdf](https://www.mm218.dev/papers/shrubland_pub_2022.pdf)

* [arxiv.org/pdf/2303.04758](https://arxiv.org/pdf/2303.04758)
  * Source: [github.com/gesistsa/rang/tree/paper/paper](https://github.com/gesistsa/rang/tree/paper/paper)

* [arxiv.org/pdf/2303.07334](https://arxiv.org/pdf/2303.07334)
  * Source: [github.com/cafri-labs/assessing-spatial-cv](https://github.com/cafri-labs/assessing-spatial-cv/)
  * Uses {targets}

## Open discussion

* Would you use Quarto to write a manuscript?

* What things seem difficult or less nice than what you currently use?

* Is there anything that didn't work the way you expected?

* Questions?

## Useful links

<br>

* Documentation: [quarto.org](https://quarto.org/) 

* GitHub Discussions: [github.com/quarto-dev/quarto-cli/discussions](https://github.com/quarto-dev/quarto-cli/discussions) 

* Intro Webinar: [jthomasmock.github.io/quarto-2hr-webinar](https://jthomasmock.github.io/quarto-2hr-webinar/) 

* Awesome Quarto List: [github.com/mcanouil/awesome-quarto](https://github.com/mcanouil/awesome-quarto)

* Zotero Connector (for source editor): [github.com/paleolimbot/rbbt](https://github.com/paleolimbot/rbbt)

## Workshop resources

<br>

* GitHub: [github.com/nrennie/LU-psychology-quarto](https://github.com/nrennie/LU-psychology-quarto)

* Slides: [nrennie.github.io/LU-psychology-quarto](https://nrennie.github.io/LU-psychology-quarto)

## Feedback

<br>

Feedback form: [forms.gle/qgsv36RxPZP1Ty7H8](https://forms.gle/qgsv36RxPZP1Ty7H8)

## 

::: columns
::: {.column}

<br>

{{< fa brands linkedin >}} [nicola-rennie](https://www.linkedin.com/in/nicola-rennie/)

{{< fa brands mastodon >}} [\@fosstodon.org/\@nrennie](https://fosstodon.org/deck/@nrennie)

{{< fa brands github >}} [nrennie](https://github.com/nrennie)

{{< fa globe >}} [nrennie.rbind.io](https://nrennie.rbind.io/)

{{< fa envelope >}} [n.rennie@lancaster.ac.uk](mailto:n.rennie@lancaster.ac.uk)

{{< fa briefcase >}} [chicas.lancaster-university.uk](https://chicas.lancaster-university.uk/)

:::
::: {.column}

![](images/qr-code.png){fig-align="center" fig-alt="QR code" width=70%}

:::
:::
